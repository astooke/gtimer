

                 ...TO DO...
11. make my own error classes?  YES do this!
32. documentation
35. Still not sure if the mmap will work, or if when a new one is opened,
    with only copy access, is that part of memory updated in another process?
    Should test in simple mp setup!  data_glob can hold files and mmaps and
    maybe close them automatically as module exits.

              ... LOW PRIORITY...


              .. to DONE...

38. double-check dir(gtimer) and try to remove everything I want hidden, like g. A: YES, did a 
    major reorganization!
37. Make wrapper with optional arguments.
36. Why the hell isn't wrap working in rllab. A: I'm an idiot, had an old gtimer.pyc
    sitting in my sandbox (had renamed gtimer.py only).
23. re-think where we hold save_itrs just for its interaction with
    stamps_as_itrs. A: YES.  Now Times object holds save_itrs.  This is only
    checked when two times objects are merged...if rcvr.save_itrs==True, then
    the non-itr stamps in new, if they exist in rcvr, are merged into rcvr.itrs (now a function set_root_save_itr, for when a whole run will be
    merged).  Separately, EACH LOOP has its own save_itrs setting.  When times
    are merged, the itrs are always merged (catches all loops with save_itrs).
    The save_itrs setting is separate for each times, and for each loop, no
    propagating up or down of setting, EXCEPT perhaps for a named_loop, which 
    sets the loop and the inner timer to the same save_itrs setting.
39. Maybe stamps as itrs is simpler it I just always track itr_num, just in
    printing itrs, only do the ones that have itr_num > 1.  A: Yup had already
    done this in dump times, just forgot to finish the job by remove merge_stamps_as_itrs...and remove all references to that.
34. test tab-delim reporting
31. TEST REPORTING. TEST TEST COMPARISON REPORTING
33. report itr stats.
10. stamp itr statistics (running avg, running stdev?) -- remember stamps sum!!
    A: not doing running std, but max, min, num, and cum.
29. Put in functions to save (pickle: to file? to RAM?) and load.
15. DUH: MULTIPROCESSING!!!
24. Fix tree traversal code to cope with parallel children?
34. write an initialize stamp function...seeing this in a lot of places.
33. merge times par subdivisions!?
28. Just group all the disabled into one file.
32.  TEST REPORTING DURING TIMING.
16. Reporting in the middle of timing...?
32. Downgrade the focusing stack.
30. In reporting, need to go back and check that par children are shown,
    even if just the max total one.
26. print a parallel section like this: make the full tree of all the
    stamps from all the parallel children, then leave a blank or a '--'
    for the children who don't have that stamp.
18. Make a reporting function that takes many timers (i.e. many
    different runs of the same program), and makes tables of all
    their stamps.  So that each table has TIMER on one axis and
    STAMP on the other...yes this is what I'm really after!
25. print stamps from parallel like this: take the stamps from the one
    that took the longest time.
17. Test behavior in un-timed loop inside of timed loop
27. Protect against user closing a timer...should also protect against
    automated closing of user timer!
25. Possible redundant aggregate_up_self in assign children, because
    I do them all at the beginning there, but also in the first call
    to merge_times.  Probably better to remove from merge_times and just
    execute as a separate call. A: Yup fixed this (quite different now)!
N+1. Automate the shortcut building.
19. Need to write a getter for the times then. A: used the old deep
    copy had written previously.
22. provide function to hard reset current timer. >> could go wrong
    if done inside a loop? A: yup, disallowed that.
20. stamp behavior in loop...if allowed duplicate, act like disjoint
    stamp within loop, but still use loop mehanism to assign to same
    iteration the following times a stamp is encountered. A: Yup this
    is much better, and gets rid of l_stamp!!! finally!!
19. save_itrs as option
7. Once the Times class is stabilized, all the reporting
    stuff that I wanted to do before.
13. DISABLE mode.
5. Self time and all that. (aggregation)
9. Stamps ordered AND register stamps
18. loop break / loop continue
6. Allow duplicate.
12. pause & resume
3. Auto-focus manager for subfunctions.
4. Test, test!
1. **Get the child-parent timer relationships working.**
2. Test, test
9. Get code files organized into global funcs and private funcs.
N. Think about how much of focus manager to expose
    to the user for manual manipulation. A: timer_mgmt

       ... WON'T DO NOW...
8. How to handle multiple separate heap (contexts)? Is this even useful?


       ...WON'T DO EVER..
14. NO_CHECK mode? X I don't think it's necessary.

